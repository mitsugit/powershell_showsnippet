function getcode {
    # powershellのコマンドを表示する
    # Ubuntu環境でも使用できるコマンド

    param()

    $selections = 
    @('重複ファイル検索', '重複ファイル検索_recursive' ,
    '連番ファイル作成', '連番ファイル作成_値入力'
    '対象ファイルの合計サイズ_recursive','エイリアス表示',
    '表示結果excel出力','Excelファイル分割(任意の列の特定の値ごと',
    '時間計測', '複数csvをExcelの各シートにまとめる')

    $index = 1
    foreach ($selection in $selections) {
        Write-Host "$index. $selection"
        $index++
    }

    $choice = Read-Host "Enter the number of the message you want to display"
    switch ($choice) {
        '1' {
            Write-Host 'ls *.txt | Get-FileHash | Group Hash | ?{$_.Count -ge 2} | Select {$_.Group.Path} | fl'
        }
        '2' {
            Write-Host 'gci *.txt -r | Get-FileHash | Group Hash | ?{$_.Count -ge 2} | Select {$_.Group.Path} | fl'
        }
        '3' {
            Write-Host '1..10|%{ni -it File "test_$_.txt"}'
        }
        '4' {
            Write-Host "1~10の連番でfile_1.txt,..."
            Write-Host '1..10 | % {Set-Content -Path "file_$_.txt" -Value "This is file number $_"}'
        }
        '5' {
            Write-Host 'gci -Recurse *.xlsx | %{$_.Length} | measure -sum'
        }
        '6' {
            Write-Host 'alias | Group-Object {$_.Definition} | Sort-Object -Property Name'
        }
        '7' {
            Write-Host '前提条件：ImportExcelモジュールがインストールされていること'
            Write-Host 'インストールしてない場合、Import-Module ImportExcel'
            Write-Host '表示したい結果 | export-excel test.xlsx'
        }
        '8' {
            # 要改善(2mbファイルで10分程かかる)
            Write-Host '前提条件：ImportExcelモジュールがインストールされていること'
            Write-Host 'インストールしてない場合、Import-Module ImportExcel'
            Write-Host '表示したい結果 | export-excel test.xlsx'
            Write-Host 'import-excel -path .\sample.xlsx -worksheetname "<シート名>" | group-object "<グループ対象列1>", "<グループ対象列2>" | %{ $_.Group | export-excel -path ("{0}_{1}.xlsx" -f $_.Group[0]."<グループ対象列1>", $_.Group[0]."<グループ対象列2>")}'
        }
        '9' {
            # 
            Write-Host 'ls *.xlsx | %{Import-Excel $_} | sort -p "<グループ対象列1>", @{Expression="<グループ対象列2>";Descending=$true} | export-excel out.xlsx'
        }
        '10' {
            Write-Host 'Measure-Command {<コマンド>}'
        }
        '11' {
            Write-Host 'gci *.csv | %{Import-CSV $_ | Export-Excel -path out.xlsx -w $_.BaseName}'
        }
    }
}
