function getcode {
    # powershellのコマンドを表示する
    # Ubuntu環境でも使用できるコマンド
    # UTF-8 with BOMで保存してから使用すること

    param()

    $selections = 
    @('重複ファイル検索', '重複ファイル検索_recursive',
    '連番ファイル作成', '連番ファイル作成_値入力',
    '対象ファイルの合計サイズ_recursive','エイリアス表示',
    '表示結果excel出力','Excelファイル分割(任意の列の特定の値ごと',
    '時間計測', '複数csvをExcelの各シートにまとめる',
    '特定の文字列を含むファイルパス取得', '検索文字列のファイルパス出力',
    'csvファイルから特定の文字列を含む行を抽出しcsvに出力',
    '複数csvファイルから特定の文字列を含む行を抽出しcsvに出力',
    '複数exelからcsvに変換',
    'フォルダ内ファイル名変更')

    $index = 1
    foreach ($selection in $selections) {
        Write-Host "$index. $selection"
        $index++
    }

    $choice = Read-Host "Enter the number of the message you want to display"
    switch ($choice) {
        '1' {
            Write-Host 'ls *.txt | Get-FileHash | Group Hash | ?{$_.Count -ge 2} | Select {$_.Group.Path} | fl'
        }
        '2' {
            Write-Host 'gci *.txt -r | Get-FileHash | Group Hash | ?{$_.Count -ge 2} | Select {$_.Group.Path} | fl'
        }
        '3' {
            Write-Host '1..10|%{ni -it File "test_$_.txt"}'
        }
        '4' {
            Write-Host "1~10の連番でfile_1.txt,..."
            Write-Host '1..10 | % {Set-Content -Path "file_$_.txt" -Value "This is file number $_"}'
        }
        '5' {
            Write-Host 'gci -Recurse *.xlsx | %{$_.Length} | measure -sum'
        }
        '6' {
            Write-Host 'alias | Group-Object {$_.Definition} | Sort-Object -Property Name'
        }
        '7' {
            Write-Host '前提条件：ImportExcelモジュールがインストールされていること'
            Write-Host 'インストールしてない場合、Import-Module ImportExcel'
            Write-Host '表示したい結果 | export-excel test.xlsx'
        }
        '8' {
            # 要改善(2mbファイルで10分程かかる)
            Write-Host '前提条件：ImportExcelモジュールがインストールされていること'
            Write-Host 'インストールしてない場合、Import-Module ImportExcel'
            Write-Host '表示したい結果 | export-excel test.xlsx'
            Write-Host 'import-excel -path .\sample.xlsx -worksheetname "<シート名>" | group-object "<グループ対象列1>", "<グループ対象列2>" | %{ $_.Group | export-excel -path ("{0}_{1}.xlsx" -f $_.Group[0]."<グループ対象列1>", $_.Group[0]."<グループ対象列2>")}'
        }
        '9' {
            # 
            Write-Host 'ls *.xlsx | %{Import-Excel $_} | sort -p "<グループ対象列1>", @{Expression="<グループ対象列2>";Descending=$true} | export-excel out.xlsx'
        }
        '10' {
            Write-Host 'Measure-Command {<コマンド>}'
        }
        '11' {
            Write-Host 'gci *.csv | %{Import-CSV $_ | Export-Excel -path out.xlsx -w $_.BaseName}'
        }
        '12' {
            # excel対象外
            Write-Host 'gci -r -File | Select-String -pattern "<検索したい文字列>" | Select Path -uniq'
        }
        '13'{
            # 破損したcsvには適用できない
            Write-Host '$csv = Import-Csv .\<対象ファイル名>.csv -Encoding Default'
            Write-Host '$csv | Where-Object { $_.<列名> -match ".*<検索文字列>.*" } | Export-Csv ./result.csv -Encoding Shift_JIS -NoTypeInformation'
        }
        '14'{
            # 破損したcsvには適用できない
            Write-Host "step1 ni test.ps1"
            Write-Host "step2 ni 下記のコードをtest.p1に張り付ける"

            Write-Host 'function ex4 {
                param (
                    [string]$SearchColumns,
                    [string]$SearchString,
                    [string]$ResultFileName
                )

                $csvFiles = Get-ChildItem -Path (Get-Location) -Filter *.csv

                # 結果を格納する空の配列を作成
                $results = @()

                foreach ($file in $csvFiles) {
                    Write-Host "Processing file: $($file.FullName)"
                    $csv = Import-Csv -Path $file.FullName -Encoding Shift_JIS
                    $filteredRows = $csv | Where-Object { $_.$SearchColumns -match ".*$SearchString.*" }
                    $filteredRows | ForEach-Object { Write-Host "Matched row: $($_)" }
                    
                    # 結果をまとめる配列にフィルタリングされた行を追加
                    $results += $filteredRows
                }

                # 最後に結果を1つのCSVファイルに出力
                $results | Export-Csv $ResultFileName -Encoding Shift_JIS -NoTypeInformation
            }'
            Write-Host "step3 「. ./test.ps1」 で読み込む"
            Write-Host "step4 「ex4  <列名> <検索文字列> <./結果ファイル名>」で実行" 
        }
        '15'{
            # ${}でやるとなぜか上手くいかないので下記の方法。csvは元のexcelの2倍のサイズになる。
            Write-Host '$files = gci *.xlsx'
            Write-Host 'foreach ($file in $files) {
                        $ex = Import-Excel $file.FullName
                        $csvFile = Join-Path $file.DirectoryName ($file.BaseName + ".csv")
                        $ex | Export-Csv $csvFile -Encoding Shift_JIS -NoTypeInformation }'
        }
        '16'{
            # フォルダ内ファイル名変更
            Write-Host '$folderPath = "<フォルダパス>"'
            Write-Host 'gci -Path $folderPath -File | Rename-Item -NewName { $_.Name -replace "<置換前文字列>", "<置換後文字列>" }'
        }
    }
    }
